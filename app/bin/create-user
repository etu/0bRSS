#!/usr/bin/env php
<?php
declare(strict_types=1);

use DI\ContainerBuilder;
use JeremyKendall\Password\PasswordValidator;
use ZerobRSS\Config;
use ZerobRSS\Dao\Groups as GroupsDao;
use ZerobRSS\Dao\UserGroups as UserGroupsDao;
use ZerobRSS\Dao\Users as UsersDao;

require_once(__DIR__.'/../vendor/autoload.php');

/**
 * Instantiate PHP-DI ContainerBuilder
 */
$containerBuilder = new ContainerBuilder();


/**
 * Set up config
 */
(require(__DIR__.'/../src/bootstrap/config.php'))($containerBuilder);


/**
 * Set up dependencies
 */
(require(__DIR__.'/../src/bootstrap/dependencies.php'))($containerBuilder);


/**
 * Build PHP-DI Container instance
 */
$container = $containerBuilder->build();


/** @var bool $debug */
$debug = $container->get(Config::class)->debug;


/** @var PasswordValidator $validator */
$validator = $container->get(PasswordValidator::class);
$validator->setOptions(['cost' => $container->get(Config::class)->bcryptPasswordCost]);


/** @var UsersDao $usersDao */
$usersDao = $container->get(UsersDao::class);


/** @var GroupsDao $groupsDao */
$groupsDao = $container->get(GroupsDao::class);


/** @var UserGroupsDao $userGroupsDao */
$userGroupsDao = $container->get(UserGroupsDao::class);


// Ask for users name
echo 'Name of user: ';
$name = trim(fgets(STDIN));


// Ask for users email
echo 'Enter emailaddress of user: ';
$email = trim(fgets(STDIN));

if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    errlog('Invalid email');
}

if ($usersDao->getUser($email, 'email')->fetch() !== false) {
    errlog('User with this email already exist'.PHP_EOL);
}


// Ask for users password with hidden input and hash the password
echo 'Enter password: ';
system('stty -echo');
$hash = $validator->rehash(trim(fgets(STDIN)));
system('stty echo');
echo PHP_EOL;



try {
    // Create user
    $userId = $usersDao->create([
        'email' => $email,
        'name' => $name,
        'password' => $hash
    ]);

    // Get group named users
    $userGroup = $groupsDao->getGroup('users', 'name')->fetch();

    // Add user to users group
    $userGroupsDao->addUserToGroup((int) $userId, (int) $userGroup->id);

    echo 'User created'.PHP_EOL;
} catch (\Exception $e) {
    print_r($e->getMessage());
}




// Print $message to stderr and exit with $code
function errlog($message, $code = 1)
{
    $stderr = fopen('php://stderr', 'w');
    fwrite($stderr, $message.PHP_EOL);
    fclose($stderr);

    exit($code);
}
